Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.

For example:
Given a binary tree {1,2,3,4,5},
    1
   / \
  2   3
 / \
4   5
return the root of the binary tree [4,5,2,#,#,3,1].
   4
  / \
 5   2
    / \
   3   1  
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


Answer

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public TreeNode upsideDownBinaryTree(TreeNode root) {  
    TreeNode node = root, parent = null, right = null;  
    while (node != null) {  
        TreeNode left = node.left;  
        node.left = right;  
        right = node.right;  
        node.right = parent;  
        parent = node;  
        node = left;  
    }  
    return parent;  
}  

public class Solution {
    public TreeNode upsideDownBinaryTree(TreeNode root) {
return dfsBottomUp(root, null);
}
private TreeNode dfsBottomUp(TreeNode p, TreeNode parent) {
if (p == null) return parent;
TreeNode root = dfsBottomUp(p.left, p);
p.left = (parent == null) ? parent : parent.right;
p.right = parent;
return root;
}
}


public TreeNode upsideDownBinaryTree(TreeNode root) {
        if(root == null)  
            return null;  
        TreeNode prev = root, neighbor = root.right, cur = root.left;
        while(cur != null){  
            TreeNode cur_neighbor = cur.right, next = cur.left; 
            cur.right = prev;  
            cur.left = neighbor;  
            prev = cur;  
            neighbor = cur_neighbor;  
            cur = next;  
        }  
        root.left = null;  
        root.right = null;  
        return prev;  
    
    }